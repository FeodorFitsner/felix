@itile 0MQ wrapper.
@tangler zmq.flx           = share/lib/std/io/zmq.flx
@tangler unix_zmq.fpc      = $PWD/src/config/unix/zmq.fpc


@h1 0MQ Interface
@tangle zmq.flx

publish """
Lightwight 0MQ wrapper.
"""


class ZeroMQ {
  requires package "zmq";

  open Errno;

/******************************************************************************/
/*  0MQ version.                                                              */
/******************************************************************************/

  const ZMQ_VERSION : int;
  proc zmq_version: &int * &int * &int;
  fun zmq_version()={
    var maj:int; 
    var min:int; 
    var rev:int; 
    zmq_version(&maj, &min,&rev);
    return maj,min,rev;
  }

/******************************************************************************/
/*  0MQ errors.                                                               */
/******************************************************************************/

  const EFSM : errno_t;
  const ENOCOMPATPROTO : errno_t;
  const ETERM : errno_t;
  const EMTHREAD : errno_t;

  fun zmq_errno : 1-> errno_t;
  fun zmq_strerror : errno_t -> string = "::std::string(zmq_strerror($1))";
 
  gen ewrap(var x:int) => if x == 0 then errno_t(0) else errno endif;

  proc zmq_validate (msg:string) (var retcode: int) {
    if retcode != -1 return;
    var err = errno;
    println$ (if msg=="" then "" else msg+" ") + "Exit due to ZMQ error "  + str err + ": " + zmq_strerror err;
    System::exit err.int;
  }
  proc zmq_validate (var retcode: int) { zmq_validate "" retcode; }

  fun zmq_check (msg:string) (var retcode:int) = {
    if retcode != -1 do return retcode; done
    var err = errno;
    println$ (if msg=="" then "" else msg+" ") + "Exit due to ZMQ error "  + str err + ": " + zmq_strerror err;
    System::exit err.int;
  }

  fun zmq_check(var retcode: int) => zmq_check "" retcode;

/******************************************************************************/
/*  0MQ message definition.                                                   */
/******************************************************************************/

  typedef zmq_free_fn = address * address --> void;
  body "void zmq_free(void *p, void *){ ::std::free(p); }";
  const zmq_free: zmq_free_fn;

  private type zmq_msg_t_ = "zmq_msg_t";
  _gc_pointer _gc_type zmq_msg_t_ type zmq_msg_t  = "zmq_msg_t*";
  gen make_zmq_msg_t : 1 -> zmq_msg_t = "new (*PTF gcp, @0, false) zmq_msg_t";

  // raw
  gen zmq_msg_init: zmq_msg_t->int;
  gen zmq_msg_init_size: zmq_msg_t * size -> int;
  gen zmq_msg_init_data: zmq_msg_t * address * size * zmq_free_fn * address -> int;
  gen zmq_msg_close: zmq_msg_t -> int;

  gen zmq_msg_move: zmq_msg_t * zmq_msg_t -> int;
  gen zmq_msg_copy: zmq_msg_t * zmq_msg_t -> int;
  fun zmq_msg_data: zmq_msg_t -> address;
  fun zmq_msg_size : zmq_msg_t -> size;

/*  Message options                                                           */
  pod type zmq_message_option_code_t = "int";
  const ZMQ_MORE : zmq_message_option_code_t;

  fun zmq_getmsgopt: zmq_msg_t * zmq_message_option_code_t * address * &size -> int;

/******************************************************************************/
/*  0MQ infrastructure (a.k.a. context) initialisation & termination.         */
/******************************************************************************/

  pod type zmq_context = "void*";

  // raw
  gen zmq_init : int  -> zmq_context;
  gen zmq_term : zmq_context -> int;

/******************************************************************************/
/*  0MQ socket definition.                                                    */
/******************************************************************************/

  pod type zmq_socket= "void*";
  // raw
  ctor zmq_socket : zmq_context * zmq_socket_type_t = "zmq_socket($1,$2)";
  gen zmq_close: zmq_socket -> int;
  gen zmq_bind : zmq_socket * string -> int = "zmq_bind($1, $2.c_str())";
  gen zmq_connect : zmq_socket * string -> int = "zmq_connect($1, $2.c_str())";
  fun valid: zmq_socket->bool = "$1!=0";

/******************************************************************************/
/*  Socket types.                                                             */ 
/******************************************************************************/

  header "typedef int zmq_socket_type_t;";
  cenum zmq_socket_type_t =   
    ZMQ_PAIR, ZMQ_PUB, ZMQ_SUB, ZMQ_REQ, ZMQ_REP, 
    ZMQ_PULL, ZMQ_PUSH, ZMQ_XPUB, ZMQ_XSUB, ZMQ_ROUTER, ZMQ_DEALER 
  ;

  instance Str[zmq_socket_type_t] {
    fun str: zmq_socket_type_t -> string =
    | $(ZMQ_PAIR) => "ZMQ_PAIR"
    | $(ZMQ_PUB) => "ZMQ_PUB"
    | $(ZMQ_SUB) => "ZMQ_SUB"
    | $(ZMQ_REQ) => "ZMQ_REQ"
    | $(ZMQ_REP) => "ZMQ_REP"
    | $(ZMQ_PULL) => "ZMQ_PULL"
    | $(ZMQ_PUSH) => "ZMQ_PUSH"
    | $(ZMQ_XPUB) => "ZMQ_XPUB"
    | $(ZMQ_XSUB) => "ZMQ_XSUB"
    | $(ZMQ_ROUTER) => "ZMQ_ROUTER"
    | $(ZMQ_DEALER) => "ZMQ_DEALER"
    ;
  }

/******************************************************************************/
/*  Socket options.                                                           */
/******************************************************************************/

  header "typedef int zmq_sockopts_tag;";
  cenum zmq_sockopts_tag =
    ZMQ_AFFINITY, ZMQ_IDENTITY, ZMQ_SUBSCRIBE, ZMQ_UNSUBSCRIBE, ZMQ_RATE,
    ZMQ_RECOVERY_IVL, ZMQ_SNDBUF, ZMQ_RCVBUF, ZMQ_RCVMORE, 
    //ZMQ_FD, 
    ZMQ_EVENTS, ZMQ_TYPE, ZMQ_LINGER, ZMQ_RECONNECT_IVL, ZMQ_BACKLOG, ZMQ_RECONNECT_IVL_MAX,
    ZMQ_MAXMSGSIZE, ZMQ_SNDHWM, ZMQ_RCVHWM, ZMQ_MULTICAST_HOPS, ZMQ_RCVTIMEO,
    ZMQ_SNDTIMEO, ZMQ_IPV4ONLY
  ;

  instance Str[zmq_sockopts_tag] {
    fun str:zmq_sockopts_tag-> string =
    | $(ZMQ_AFFINITY) => "ZMQ_AFFINITY"
    | $(ZMQ_IDENTITY) => "ZMQ_IDENTITY"
    | $(ZMQ_SUBSCRIBE) => "ZMQ_SUBSCRIBE"
    | $(ZMQ_UNSUBSCRIBE) => "ZMQ_UNSUBSCRIBE"
    | $(ZMQ_RATE) => "ZMQ_RATE"
    | $(ZMQ_RECOVERY_IVL) => "ZMQ_RECOVERY_IVL"
    | $(ZMQ_SNDBUF) => "ZMQ_SNDBUF"
    | $(ZMQ_RCVBUF) => "ZMQ_RCVBUF"
    | $(ZMQ_RCVMORE) => "ZMQ_RCVMORE"
    //| $(ZMQ_FD) => "ZMQ_FD"
    | $(ZMQ_EVENTS) => "ZMQ_EVENTS"
    | $(ZMQ_TYPE) => "ZMQ_TYPE"
    | $(ZMQ_LINGER) => "ZMQ_LINGER"
    | $(ZMQ_RECONNECT_IVL) => "ZMQ_RECONNECT_IVL"
    | $(ZMQ_BACKLOG) => "ZMQ_BACKLOG"
    | $(ZMQ_RECONNECT_IVL_MAX) => "ZMQ_RECONNECT_IVL_MAX"
    | $(ZMQ_MAXMSGSIZE) => "ZMQ_MAXMSGSIZE"
    | $(ZMQ_SNDHWM) => "ZMQ_SNDHWM"
    | $(ZMQ_RCVHWM) => "ZMQ_RCVHWM"
    | $(ZMQ_MULTICAST_HOPS) => "ZMQ_MULTICAST_HOPS"
    | $(ZMQ_RCVTIMEO) => "ZMQ_RCVTIMEO"
    | $(ZMQ_SNDTIMEO) => "ZMQ_SNDTIMEO"
    | $(ZMQ_IPV4ONLY) => "ZMQ_IPV4ONLY"
    ;
  }


  union zmq_socket_options =
  | zmq_affinity of uint64             // 64 1 bit flags for 64 threads
  | zmq_identity of string             // socket name
  | zmq_subscribe of string            // message prefix
  | zmq_unsubscribe of string          // message prefix
  | zmq_rate of int                    // kb/sec
  | zmq_recovery_ivl of int            // ms
  | zmq_sndbuf of int                  // bytes
  | zmq_rcvbuf of int                  // bytes
  | zmq_rcvmore of bool                // encoding: int, true=more parts following
  //| zmq_fd of file                     // native file type 
  | zmq_events of zmq_pollitem_flag_t  // encoding: int
  | zmq_type of  zmq_socket_type_t     // ro, socket type: encoding int
  | zmq_linger of int                  // close linger time
  | zmq_reconnect_ivl of int           // ms
  | zmq_backlog of int                 // number of connections
  | zmq_reconnect_ivl_max of int       // ms
  | zmq_maxmsgsize of int64            // bytes
  | zmq_sndhwm of int                  // messages
  | zmq_rcvhwm of int                  // messages
  | zmq_multicast_hops of int          // hops
  | zmq_rcvtimeo of int                // ms
  | zmq_sndtimeo of int                // ms
  | zmq_ipv4only of bool               // encoding: int
  ;

  instance Str[zmq_socket_options] {
    fun str: zmq_socket_options -> string =
    | zmq_affinity x => "affinity " + str x // fix: bit set
    | zmq_identity x => "identity '" + str x+"' socket name"
    | zmq_subscribe x => "subscribe '" + str x+"' message prefix"
    | zmq_unsubscribe x => "unsubscribe '" + str x+"' message prefix"
    | zmq_rate x => "rate " + str x+" kb/sec"
    | zmq_recovery_ivl x => "recovery_ivl " + str x+" ms"
    | zmq_sndbuf x => "sndbuf " + str x+" bytes"
    | zmq_rcvbuf x => "rcvbuf " + str x+" bytes"
    | zmq_rcvmore x => "rcvmore " + str x
    //| zmq_fd x => "fd ?? native file type " // fix, numeric code
    | zmq_events x => "events " + str x
    | zmq_type x => "type " + str x
    | zmq_linger x => "linger " + str x+" ms"
    | zmq_reconnect_ivl x => "reconnect_ivl " + str x+" ms"
    | zmq_backlog x => "backlog " + str x+" connections"
    | zmq_reconnect_ivl_max x => "reconnect_ivl_max " + str x+" ms"
    | zmq_maxmsgsize x => "maxmsgsize " + str x+" bytes"
    | zmq_sndhwm x => "sndhwm " + str x+" messages"
    | zmq_rcvhwm x => "rcvhwm " + str x+" messages"
    | zmq_multicast_hops x => "multicast_hops " + str x+" hops"
    | zmq_rcvtimeo x => "rcvtimeo " + str x+" ms"
    | zmq_sndtimeo x => "sndtimeo " + str x+" ms"
    | zmq_ipv4only x => "ipv4only " + str x
    ;
  }

  private typedef blobkind = typesetof (uint64,int64,int,char^256,size,bool,
    //file,
    zmq_pollitem_flag_t, zmq_socket_type_t);
  private typedef blobkind_ptr = typesetof (&uint64,&int64,&int,+char,&size);

  private gen zmq_setsockopt : zmq_socket * zmq_sockopts_tag * !blobkind_ptr * size -> int;

  private gen zset(s:zmq_socket, o:zmq_sockopts_tag, var x:uint64 ) => 
    zmq_setsockopt (s, o, &x, C_hack::sizeof[uint64]);
  private gen zset(s:zmq_socket, o:zmq_sockopts_tag, var x:int64 )  => 
    zmq_setsockopt (s, o, &x, C_hack::sizeof[int64]);
  private gen zset(s:zmq_socket, o:zmq_sockopts_tag, var x:int )    => 
    zmq_setsockopt (s, o, &x, C_hack::sizeof[int]);
  private gen zset(s:zmq_socket, o:zmq_sockopts_tag, x:bool )       => 
    zset(s, o, if x then 1 else 0 endif);
  private gen zset(s:zmq_socket, o:zmq_sockopts_tag, x:string )     => 
    zmq_setsockopt (s, o, x.cstr, x.len);
  
 
  gen set_sockopt(s: zmq_socket) (o: zmq_socket_options) =>
    match o with
    | zmq_affinity x          => zset(s, ZMQ_AFFINITY, x) 
    | zmq_identity x          => zset(s, ZMQ_IDENTITY, x) 
    | zmq_subscribe x         => zset(s, ZMQ_SUBSCRIBE, x) 
    | zmq_unsubscribe x       => zset(s, ZMQ_UNSUBSCRIBE, x) 
    | zmq_rate x              => zset(s, ZMQ_RATE, x) 
    | zmq_recovery_ivl x      => zset(s, ZMQ_RECOVERY_IVL, x) 
    | zmq_sndbuf x            => zset(s, ZMQ_SNDBUF, x) 
    | zmq_rcvbuf x            => zset(s, ZMQ_RCVBUF, x) 
    | zmq_linger x            => zset(s, ZMQ_LINGER, x) 
    | zmq_reconnect_ivl x     => zset(s, ZMQ_RECONNECT_IVL, x) 
    | zmq_backlog x           => zset(s, ZMQ_BACKLOG, x) 
    | zmq_reconnect_ivl_max x => zset(s, ZMQ_RECONNECT_IVL_MAX, x) 
    | zmq_maxmsgsize x        => zset(s, ZMQ_MAXMSGSIZE, x) 
    | zmq_sndhwm x            => zset(s, ZMQ_SNDHWM, x) 
    | zmq_rcvhwm x            => zset(s, ZMQ_RCVHWM, x) 
    | zmq_multicast_hops x    => zset(s, ZMQ_MULTICAST_HOPS, x) 
    | zmq_rcvtimeo x          => zset(s, ZMQ_RCVTIMEO, x) 
    | zmq_sndtimeo x          => zset(s, ZMQ_SNDTIMEO, x) 
    | zmq_ipv4only x          => zset(s, ZMQ_IPV4ONLY, x) 
    | _ => Control::fail_fun[int]$ "ZMQ: socket option " + str o + " cannot be set"
  ;
 
  private gen zmq_getsockopt : zmq_socket * zmq_sockopts_tag * address * &size -> int;

  proc get_sockopt[T:blobkind](s:zmq_socket, o:zmq_sockopts_tag, pd:&T, ps: &size)
  {
  again:>
    val ok = zmq_getsockopt(s,o,pd.address,ps);
    if ok == 0 return;
    if errno == EINTR goto again;
    Control::fail$ "zmq_setsockopt failed with code " + zmq_strerror errno;
  }

  private gen get_uint64(s:zmq_socket, o: zmq_sockopts_tag) = { 
    var x:uint64; var n = C_hack::sizeof[typeof(x)]; get_sockopt(s,o,&x,&n); return x; }
  private gen get_int64(s:zmq_socket, o: zmq_sockopts_tag) = { 
    var x:int64; var n = C_hack::sizeof[typeof(x)]; get_sockopt(s,o,&x,&n); return x; }
  private gen get_int(s:zmq_socket, o: zmq_sockopts_tag) = { 
    var x:int; var n = C_hack::sizeof[typeof(x)]; get_sockopt(s,o,&x,&n); return x; }
  private gen get_bool(s:zmq_socket, o: zmq_sockopts_tag) = { return get_int(s,o)!=0; } 
  //private gen get_file(s:zmq_socket, o: zmq_sockopts_tag) = { 
  //  var x:file; var n = C_hack::sizeof[typeof(x)]; get_sockopt(s,o,&x,&n); return x; }
  private gen get_socket_type(s:zmq_socket, o: zmq_sockopts_tag) = { 
    var x:zmq_socket_type_t; var n = C_hack::sizeof[typeof(x)]; get_sockopt(s,o,&x,&n); return x; }
  private gen get_string(s:zmq_socket, o: zmq_sockopts_tag) : string = { 
    var x:array[char,256]; var n = 256uz; get_sockopt[char^256](s,o,&x,&n); return string(carray &x,n); }
  private gen get_pollitem(s:zmq_socket, o: zmq_sockopts_tag) = { 
    var x:zmq_pollitem_flag_t; var n = C_hack::sizeof[typeof(x)]; get_sockopt(s,o,&x,&n); return x; }


  gen getsockopt(s: zmq_socket, o: zmq_sockopts_tag) : zmq_socket_options =>
    match o with
    | $(ZMQ_AFFINITY)          => zmq_affinity (get_uint64(s, o))
    | $(ZMQ_IDENTITY)          => zmq_identity (get_string(s, o))
    | $(ZMQ_SUBSCRIBE)         => zmq_subscribe (get_string(s, o))
    | $(ZMQ_UNSUBSCRIBE)       => zmq_unsubscribe (get_string(s, o))
    | $(ZMQ_RATE)              => zmq_rate (get_int(s, o))
    | $(ZMQ_RECOVERY_IVL)      => zmq_recovery_ivl (get_int(s, o))
    | $(ZMQ_SNDBUF)            => zmq_sndbuf (get_int(s, o))
    | $(ZMQ_RCVBUF)            => zmq_rcvbuf (get_int(s, o))
    | $(ZMQ_RCVMORE)           => zmq_rcvmore (get_bool(s, o))
    //| $(ZMQ_FD)                => zmq_fd (get_file(s, o))
    | $(ZMQ_EVENTS)            => zmq_events (get_pollitem(s, o))
    | $(ZMQ_TYPE)              => zmq_type (get_socket_type(s, o))
    | $(ZMQ_LINGER)            => zmq_linger (get_int(s, o))
    | $(ZMQ_RECONNECT_IVL)     => zmq_reconnect_ivl (get_int(s, o))
    | $(ZMQ_BACKLOG)           => zmq_backlog (get_int(s, o))
    | $(ZMQ_RECONNECT_IVL_MAX) => zmq_reconnect_ivl_max (get_int(s, o))
    | $(ZMQ_MAXMSGSIZE)        => zmq_maxmsgsize (get_int64(s, o))
    | $(ZMQ_SNDHWM)            => zmq_sndhwm (get_int(s, o))
    | $(ZMQ_RCVHWM)            => zmq_rcvhwm (get_int(s, o))
    | $(ZMQ_MULTICAST_HOPS)    => zmq_multicast_hops (get_int(s, o))
    | $(ZMQ_RCVTIMEO)          => zmq_rcvtimeo (get_int(s, o))
    | $(ZMQ_SNDTIMEO)          => zmq_sndtimeo (get_int(s, o))
    | $(ZMQ_IPV4ONLY)          => zmq_ipv4only (get_bool(s, o))
  ;

/******************************************************************************/
/*  Send/recv                                                                 */
/******************************************************************************/

  header "typedef int zmq_xmit_options_t;";
  cenum zmq_xmit_options_t = ZMQ_DONTWAIT, ZMQ_SNDMORE;
  const ZMQ_XMIT_OPTIONS_NONE : zmq_xmit_options_t = "0";

 
  // raw
  gen zmq_send : zmq_socket * address * size * zmq_xmit_options_t -> int;
  gen zmq_recv : zmq_socket * address * size * zmq_xmit_options_t -> int;
  gen zmq_sendmsg : zmq_socket * zmq_msg_t * zmq_xmit_options_t  -> int;
  gen zmq_recvmsg : zmq_socket * zmq_msg_t * zmq_xmit_options_t -> int;
/******************************************************************************/
/*  I/O multiplexing.                                                         */
/******************************************************************************/

  type zmq_pollitem_flag_t = "short";
  const ZMQ_POLLIN : zmq_pollitem_flag_t;
  const ZMQ_POLLOUT : zmq_pollitem_flag_t;
  const ZMQ_POLLERR : zmq_pollitem_flag_t;
  ctor short: zmq_pollitem_flag_t = "$1";
  instance Bits[zmq_pollitem_flag_t] {}
  instance Str[zmq_pollitem_flag_t] {
    fun str(x:zmq_pollitem_flag_t) => "Some flag here";
  }

  body """
    zmq_pollitem_t mk_zmq_pollitem(void *s, short events) {
      zmq_pollitem_t p = {s,0,events,0};
      return p;
    }
  """;

  type zmq_poll_item = "zmq_pollitem_t";
  ctor zmq_poll_item: zmq_socket * zmq_pollitem_flag_t = "mk_zmq_pollitem($1,$2)";
  fun revents: zmq_poll_item -> zmq_pollitem_flag_t = "$1.revents";

  gen zmq_poll: carray[zmq_poll_item] * int * long -> int;

  gen zmq_poll(pits : varray[zmq_poll_item], t:double) => // Felix time is in seconds
    zmq_poll (carray pits, pits.len.int, if t >= 0.0 then long (t/1000000.0) else -1L endif);


  inherit Str[zmq_socket_type_t];
  inherit Str[zmq_sockopts_tag];
  inherit Str[zmq_socket_options];
  inherit Str[zmq_pollitem_flag_t];
  inherit Bits[zmq_pollitem_flag_t];
}

class Checked_ZeroMQ[T] {
  inherit ZeroMQ;
  open Errno::Check[T];

  proc init_size (x:zmq_msg_t) (n:size) { int_to_proc$ zmq_msg_init_size (x,n); }
  proc init (x:zmq_msg_t) { int_to_proc$ zmq_msg_init (x); }
  proc close (x:zmq_msg_t) { int_to_proc$ zmq_msg_close x; }

  fun _ctor_zmq_msg_t ()  => make_zmq_msg_t();

  proc init_string (x:zmq_msg_t) (s:string) {
    var n = len s;
    var b = C_hack::malloc(n);
    memcpy(b, address s.cstr, n);
    int_to_proc (zmq_msg_init_data (x, b, n, zmq_free, NULL));
  } 

  ctor string: zmq_msg_t = "::std::string((char const*)zmq_msg_data($1), (size_t)zmq_msg_size($1))";

  fun zmq_more(m:zmq_msg_t):bool = 
  {
    var x: int;
    var n:size;
    int_to_proc (zmq_getmsgopt(m,ZMQ_MORE,&x.address,&n));
    assert n == C_hack::sizeof[int];
    return x != 0;
  } 

  fun zmq_more (s:zmq_socket) => 
    match s.get_opt ZMQ_RCVMORE with 
    | zmq_rcvmore x => x 
    endmatch 
  ;

  proc send_msg (s:zmq_socket) (m:zmq_msg_t) => int_to_proc$ zmq_sendmsg (s,m,ZMQ_XMIT_OPTIONS_NONE);
  proc send_string (s:zmq_socket) (m:string) => int_to_proc$ zmq_send(s,m.cstr.address,m.len,ZMQ_XMIT_OPTIONS_NONE);
  proc send_string_part (s:zmq_socket) (m:string) => int_to_proc$ zmq_send(s,m.cstr.address,m.len,ZMQ_SNDMORE);
  proc recv_msg (s:zmq_socket) (m:zmq_msg_t) => int_to_proc$ zmq_recvmsg (s,m,ZMQ_XMIT_OPTIONS_NONE);
  proc recv_msg_dontwait (s:zmq_socket) (m:zmq_msg_t) => int_to_proc$ zmq_recvmsg (s,m,ZMQ_DONTWAIT);
  gen recv_string (s:zmq_socket) = {
    var m : zmq_msg_t = zmq_msg_t();
    m.init;
    recv_msg s m;
    r := m.string;
    m.close;
    return r;
  }

  gen recv_string_dontwait (s:zmq_socket) = {
    var m : zmq_msg_t = zmq_msg_t();
    m.init;
    recv_msg_dontwait s m;
    r := m.string;
    m.close;
    return r;
  }

  ctor zmq_context : int = "zmq_init($1)";
  proc term (x:zmq_context) => int_to_proc$ zmq_term x;

  fun check_socket(var x:zmq_socket)= { if x.valid do return x; else ehandler; done; }
  gen mk_socket (c: zmq_context) (t:zmq_socket_type_t) => check_socket$ zmq_socket (c,t);
  proc set_opt(s: zmq_socket) (o: zmq_socket_options) => int_to_proc (set_sockopt s o);
  fun get_opt(s: zmq_socket) (o: zmq_sockopts_tag) : zmq_socket_options => getsockopt (s,o);

  proc bind(x:zmq_socket) (a:string) => int_to_proc$ zmq_bind(x,a);
  proc connect(x:zmq_socket) (a:string) => int_to_proc$ zmq_connect(x,a);
  proc close (s:zmq_socket) => int_to_proc$ zmq_close s;

  gen poll(pits:varray[zmq_poll_item], timeout:double) => // seconds, -1=block
   int_to_int (zmq_poll (pits, timeout));

  proc send_strings (s:zmq_socket) (ss:varray[string]) {
    var n = ss.len.int;
    for var i in 0 upto n - 2 do
      send_string_part s ss.i;
    done
    if n>0 do
      send_string s ss.(n - 1);
    done
  }

  proc send_strings (s:zmq_socket) (ss:list[string]) {
    send_strings s (varray ss);
  }

  gen recv_strings (s:zmq_socket) : varray[string] = {
    var ss = Empty[string];
    var more = true;
    while more do 
      var r = recv_string s;
      ss= Cons (r,ss);
      more = zmq_more s;
    done
    return varray (rev ss);
  }

} 

type zmq_ehandler_t = ""; // phantom
instance Check[zmq_ehandler_t]
{
  fun ehandler():any = {
    err := errno;
    println$  "Exit due to ZMQ error "  + str err + ": " + ZeroMQ::zmq_strerror err;
    System::exit err.int;
  }
}

class ZMQ {
  inherit Checked_ZeroMQ[zmq_ehandler_t];

  // this function cannot go in Checked_ZeroMQ
  // we get ehandler virtual persisting to code gen
  // why?
 
}
@h1 Config
@tangle unix_zmq.fpc
Name: ZeroMQ 
Description: Message Passing Library
provides_dlib: -lzmq
provides_slib: -lzmq
includes: '"zmq.h"'
@

